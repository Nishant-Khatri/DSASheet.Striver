class Solution {
    public Boolean isSafe(int row,int col,char[][] board,int n)
    {
        int x=row;
        int y=col;
        // row check
        while(y>=0 &&  x>=0 && y<n && x<n )
        {
            if(board[x][y]=='Q') return false;
            y--;
        }


         x=row;
         y=col;
        // upper diagnol check
       while(y>=0 && x>=0  && y<n && x<n )
       {
            if(board[x][y]=='Q') return false;
            y--;
            x--;         
       }

        x=row;
        y=col;
          // lower diagnol check
        while(y>=0 && x>=0 && y<n && x<n)
       {
            if(board[x][y]=='Q') return false;
            y--;
            x++;         
       }

       return true;
    }
    public void Solve(List<List<String>> ans,char[][] board,int col,int n)
    {
      //base Case
      if(col==n)
      {
        ans.add(construct(board));
      }
      for(int i=0;i<n;i++)
      {
        if(isSafe(i,col,board,n))
        
        { 
            System.out.println(board[i][col]+"  " +i+" "+col+" ");
            board[i][col]='Q';
            Solve(ans,board,col+1,n);
            board[i][col]='.';
        }
      }
    }
    public List<String> construct(char[][] board)
    {
        List<String> hm=new ArrayList<>();
        for(int i=0;i<board.length;i++)
        {
      
            String hab= new String(board[i]);
             hm.add(hab);
        }    
        return hm;
    }


  public List<List<String>> solveNQueens(int n) 
  {

        List<List<String>> ans=new ArrayList<>();
        char[][] board=new char[n][n]; 
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
      
           Solve(ans,board,0,n);
    return ans;
    }
}
