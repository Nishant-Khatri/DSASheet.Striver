class Solution {
    int count=0;
    public boolean solve(char[][] board)
    {

       for(int i=0;i<9;i++){
           for(int j=0;j<9;j++){
               if(board[i][j]=='.')
                {
                    for(char val='1';val<='9';val++){
                        if(isSafe(board,val,i,j)){
                            board[i][j]=val;
                        count++;
                        boolean nextSolutionPossible=solve(board);
                        if(nextSolutionPossible) return true;
                        board[i][j]='.';
                        }
                    }
                    return false;
                }
           }
       }
       return true;
    }
    public boolean isSafe(char[][] board,char val,int row,int col)
    {
        for(int i=0;i<9;i++){
      
                if(board[row][i]==val ) return false;
                if (board[i][col]==val) return false;
                if(board[3*(row/3)+(i/3)][3*(col/3)+(i%3)] == val) return false;

        }
        return true;
    }
    public void solveSudoku(char[][] board) {
      
      solve(board);
      System.out.println(count)  ;
    }
}
