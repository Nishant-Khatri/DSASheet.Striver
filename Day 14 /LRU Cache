class LRUCache {
    
    int size;
    Node head;
    Node tail;
    HashMap<Integer,Node> hm;

    public LRUCache(int capacity) {
        head=new Node(0,0);
        tail=new Node(0,0);
        head.next=tail;
        tail.prev=head;
        size=capacity;
        hm=new HashMap<>();
    }
    
    public int get(int key) {
        if(hm.containsKey(key))
        {
          Node temp=hm.get(key);
          remove(temp);
         insert(temp);
         return temp.val;
        }
       return -1;
        
    }
    public void remove (Node temp)
    {
        hm.remove(temp.key);
        temp.prev.next=temp.next;
        temp.next.prev=temp.prev;
        
    }
    public void insert(Node temp){
            temp.prev=head;
            temp.next=head.next;
            head.next=temp;
            temp.next.prev=temp;
            hm.put(temp.key,temp);
    }
    public void put(int key, int value) {
        if(hm.containsKey(key))
        {
            remove(hm.get(key));
        }
        if(hm.size()==size) 
        {
            remove(tail.prev);
        }
        insert(new Node(key,value));
        
        
    }
}
class Node{
        Node prev;
        Node next;
        int key;
        int val;
        Node(int key,int val)
        {
            this.key=key;
            this.val=val;
        }
    }

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
