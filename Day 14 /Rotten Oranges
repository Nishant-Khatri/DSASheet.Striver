class Solution {
    public int orangesRotting(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        Queue<int []> q=new LinkedList<>();
        int totalOranges=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==2)
                {
                    q.add(new int[]{i,j});
                }
                if(grid[i][j]!=0)
                {
                    totalOranges++;
                }
            }
        }
        int minminutes=0,cntor=0;
        int dx []={0,0,1,-1};
        int dy []={1,-1,0,0};
        while(!q.isEmpty())
        {
            int k=q.size();
             cntor+=k;
            while(k-- > 0)
            {
                int arr[]=q.poll();            
                   for(int i=0;i<4;i++)
                   {
                       int x=dx[i] + arr[0];
                       int y=dy[i] + arr[1]; 
                       if(x>=m||y>=n||x<0||y<0||grid[x][y]!=1) continue;
                      grid[x][y]=2; 
                      q.add(new int[] {x,y});
                   }
                   
            }
            if(q.size()!=0)
            minminutes++;
        }
        System.out.println(cntor+" "+ totalOranges+" "+minminutes);
    if(cntor==totalOranges) return minminutes;
    else return -1;
        
    }
}
